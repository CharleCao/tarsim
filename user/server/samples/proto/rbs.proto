// Package used. For more info, please refer to google protobuf tutorials
syntax = "proto3";
// Imported module
import "common.proto";
// Package name
package SIM;

// **************** RIGID BODY SYSTEM CONFIGURATION DATA ***********************
// All properties of a rigid body system (e.g. robot). Your rbs.txt file
// should define these parameters.
message RigidBodySystem {
    // Rigid body system index
    int32 index = 1;

    // Rigid body system name
    string name = 2;

    // All rigid bodies composing the rigid body system (e.g. all robot links)
    repeated RigidBody rigid_bodies = 3;

    // All mates of the rigid body system (e.g. all robot joints)
    repeated Mate mates = 4;

    // The properties of the camera looking at the robot. The camera properties
    // can be changed during the run by the user
    Camera camera = 5;
    // All the physical objects in the space
    repeated ExternalObject objects = 6;

    // Whether to save joint values when closing the simulator and use them
    // as the initial values next time the simulator comes up. This is important
    // when simulating a robot that could have been turned off at a random
    // configuration
    bool should_start_with_previous_joint_values = 7;

    // Control cycle duration in ms. This tell the simulator how often it should
    // expect the next joint values. For example for a real time system with
    // a cycle of 1ms, the simulator expected a new set of joint values every
    // 1ms. If not received at that frequency, the simulator shows a fault.
    double control_cycle = 8;

    // Control cycle tolerance in ms. How much difference in joint values
    // frequency change can be tolerated. For example, if it is expected from a
    // real-time system to operate at 1ms -/+ 0.01ms. Then, this value would be
    // 0.01 ms. If you don't run this under a real-time operating system, you
    // may want to keep the tolerance higher (e.g. 0.5 ms)
    double control_cycle_tolerance = 9;

    // Collision detection algorithm properties
    CollisionDetection collision_detection = 10;
}


// ************************* DEFINITION OF PARAMETERS **************************
// (1) Appearance Parameters

// A point defined in a coordinate frame shown as a sphere
message Point {
    // Point location

    Vector location = 1;

    // Radius of the point shown as a sphere
    double radius = 2;

    // Point color
    Color color = 3;

    // Collision detection distance
    double collision_detection_distance = 4;
}

// A point defined between two points
message Line {
    // Line start point
    Vector from = 1;

    // Line end point
    Vector to = 2;

    // Line width when displayed on screen
    double width = 3;

    // Line color
    Color color = 4;

    // Collision detection distance
    double collision_detection_distance = 5;
}

// CAD model representation of a rigid body
message CadModel {
    // Path to CAD (STL) file of the rigid body with respect to current folder
    string path = 1;

    // Transformation matrix from CAD model frame to rigid body frame
    Xfm xfm_cad_to_rigid_body = 2;

    // CAD model color
    Color color = 3;

    // CAD model opacity (1.0 is totally opaque and 0.0 is completely transparent
    double opacity = 4;
    
    // Index for CAD model
    int32 index = 5;
}

// Parameters defining how a rigid body would appear on simulator
message RigidBodyAppearance {
    // Rigid body CAD model
    repeated CadModel cad = 1;

    // Rigid body points shown as spheres
    repeated Point points = 2;

    // Rigid body lines
    repeated Line lines = 3;

	// Rigid body planes
    repeated Plane planes = 4;
}

// Camera clipping range. Anything outside the min and max distance from the
// camera will be clipped
message ClippingRange {
    // Min distance to camera
    double min = 1;

    // Max distance to camera
    double max = 2;
}

// Camera properties
message Camera {
    // Position in world coordinate frame
    Vector position = 1;

    // Focal point in world coordinate frame
    Vector focal_point = 2;

    // Up direction for the camera
    Vector view_up = 3;

    // Camera clipping range
    ClippingRange clipping_range = 4;
}

// (2) Rigid Body System Parameters

// A joint on a rigid body. Note that a joint comes into a rigid body system
// when mated with another joint on another rigid body. In other words, a joint
// merely represents a mechanical bearing on a rigid body.
message Joint {
    // Joint index
    int32 index = 1;

    // Joint name
    string name = 2;

    // Transformation matrix from joint's coordinate frame to rigid body's frame
    // The z-axis of the joint frame is along the rotation axis for a spherical
    // joint and along the motion axis for a prismatic joint.
    Xfm xfm_joint_to_rigid_body = 3;

    // Joint types
    enum JointType {
        UNKNOWN = 0;
        REVOLUTE = 1;
        PRISMATIC = 2;
    }

    // Joint type
    JointType Joint_type = 4;
}

// Parameters that fully define the mechanical and visual properties of
// a rigid body in space.
message RigidBody {
    // Rigid body index
    int32 index = 1;

    // Rigid body name
    string name = 2;

    // Visual properties of the rigid body
    RigidBodyAppearance appearance = 3;

    // Mechanical properties of the rigid body
    Xfm xfm_rigid_body_to_world = 4;

    // Joints of a rigid body (which may or may not be mated)
    repeated Joint joints = 5;

    // Whether this rigid body is fixed
    bool is_fixed = 6;

    // We could add however many frames we want to a rigid body to display
    // and track and query their transformations matrix with respect to
    // world coordinate frame
    repeated CoordinateFrame frames = 7;
}

// Each mate is composed of two sides from two different rigid bodies. Here,
// we can define one side of a mate
message MateSide {
    // The rigid body index
    int32 rigid_body_index = 1;

    // The index of the joint in the rigid body properties
    int32 joint_index = 2;
}

// A mate corresponds a robot joint. It is made of two rigid body joints that
// are mechanically/physically constrained (for example using a bearing). When
// two joints are mated, their z-axes will be collinear (same unit vector)
message Mate {
    // Mate index. If you have a robot with joints 1 and 2, then its rigid body
    // system would have two mates with indices 1 and 2
    int32 index = 1;

    // Mate's name
    string name = 2;

    // Units of mate values
    enum Unit {
        option allow_alias = true;
        // Default for prismatic joint value
        MM = 0;
        // Default for rotary joint value
        DEG = 0;
        // Prismatic joint value unit (meter)
        M = 1;
        // Rotary joint value unit (radian)
        RAD = 2;
    }

    // Mate value (robot's joint value)
    double value = 3;

    // The mate value unit
    Unit value_unit = 4;

    // Whether a mate value is limited
    bool is_limited = 5;

    // If mate value is limited, the min value
    double min = 6;

    // If mate value is limited, the max value
    double max = 7;

    // The mate sides (which rigid bodies are mated, which joints of each
    // rigid body are mated)
    repeated MateSide sides = 8;

    // Mate angular offset (the angle between x-axes of the mated joints)
    double angular_offset = 9;

    // Angular offset unit
    Unit angular_offset_unit = 10;

    // Mate linear offset (the distance between origins of the mated joints)
    double linear_offset = 11;

    // Linear offset unit
    Unit linear_offset_unit = 12;

    // Gear ratio. When the mate value is received from a user, it will be
    // multiplied by this
    double gear_ratio = 13;

    // Whether the joint velocity is limited (Joint velocity is the difference
    // between current and previous joint values divided by the difference
    // between the current and previous time)
    bool is_velocity_limited = 14;

    // If mate velocity is limited, the min velocity
    double min_velocity = 15;

    // If mate velocity is limited, the max velocity
    double max_velocity = 16;

    // Whether the joint acceleration is limited (Joint acceleration is the
    // difference between current and previous joint velocities divided by the
    // difference between the current and previous time)
    bool is_acceleration_limited = 17;

    // If mate acceleration is limited, the min acceleration
    double min_acceleration = 18;

    // If mate acceleration is limited, the max acceleration
    double max_acceleration = 19;
}

// The properties of a physical object that will be shown and can be manipulated
message ExternalObject {
    // Object index
    int32 index = 1;

    // Object name
    string name = 2;

    // Object's initial frame with respect to the world coordinate frame
    Xfm xfm_object_to_world = 3;

    // The visual properties of the object
    RigidBodyAppearance appearance = 4;

    // We could add however many frames we want to an object to display
    // and track and query their transformations matrix with respect to
    // world coordinate frame
    repeated CoordinateFrame frames = 5;
}

// The properties of a collision detection algorithm. It creates bounding boxes
// around the points, lines and planes defined in rigid body system.
// Each line and plane has a collision_detection_distance that is employed by
// If collision_detection_distance is set to zero for a line or plane, then it
// this algorithm would be ignored.
// It uses a schepe around a point, capsule around a line, and a cuboid around a plane
message CollisionDetection {
	// Whether the collision detection is active.
	bool is_active = 1;

	// Definition for a self-collision
	message SelfCollision {
		// First rigid-body of the robot
		int32 first_rigid_body_index = 1;

		// Second rigid-body of the robot
		int32 second_rigid_body_index = 2;
	}

	// A series of self-collision between robot's rigid bodies
	repeated SelfCollision self_collisions = 2;
}


